/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ibm.watson.litelinks.test.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-27")
public class DummyStruct implements org.apache.thrift.TBase<DummyStruct, DummyStruct._Fields>, java.io.Serializable, Cloneable, Comparable<DummyStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DummyStruct");

  private static final org.apache.thrift.protocol.TField BOOL_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("boolField", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField DOUBLE_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleField", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField STRING_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("stringField", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ENUM_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("enumField", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LIST_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("listField", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField MAP_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("mapField", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField SET_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("setField", org.apache.thrift.protocol.TType.SET, (short)7);
  private static final org.apache.thrift.protocol.TField REQUIRED_INT_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("requiredIntField", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LONG_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("longField", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField BINARY_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryField", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DummyStructStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DummyStructTupleSchemeFactory();

  public boolean boolField; // required
  public double doubleField; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String stringField; // required
  /**
   *
   * @see DummyEnum
   */
  public @org.apache.thrift.annotation.Nullable DummyEnum enumField; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> listField; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,DummyEnum> mapField; // required
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Long> setField; // required
  public int requiredIntField; // required
  public long longField; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer binaryField; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOL_FIELD((short)1, "boolField"),
    DOUBLE_FIELD((short)2, "doubleField"),
    STRING_FIELD((short)3, "stringField"),
    /**
     *
     * @see DummyEnum
     */
    ENUM_FIELD((short)4, "enumField"),
    LIST_FIELD((short)5, "listField"),
    MAP_FIELD((short)6, "mapField"),
    SET_FIELD((short)7, "setField"),
    REQUIRED_INT_FIELD((short)8, "requiredIntField"),
    LONG_FIELD((short)9, "longField"),
    BINARY_FIELD((short)10, "binaryField");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOL_FIELD
          return BOOL_FIELD;
        case 2: // DOUBLE_FIELD
          return DOUBLE_FIELD;
        case 3: // STRING_FIELD
          return STRING_FIELD;
        case 4: // ENUM_FIELD
          return ENUM_FIELD;
        case 5: // LIST_FIELD
          return LIST_FIELD;
        case 6: // MAP_FIELD
          return MAP_FIELD;
        case 7: // SET_FIELD
          return SET_FIELD;
        case 8: // REQUIRED_INT_FIELD
          return REQUIRED_INT_FIELD;
        case 9: // LONG_FIELD
          return LONG_FIELD;
        case 10: // BINARY_FIELD
          return BINARY_FIELD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOLFIELD_ISSET_ID = 0;
  private static final int __DOUBLEFIELD_ISSET_ID = 1;
  private static final int __REQUIREDINTFIELD_ISSET_ID = 2;
  private static final int __LONGFIELD_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOL_FIELD, new org.apache.thrift.meta_data.FieldMetaData("boolField", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DOUBLE_FIELD, new org.apache.thrift.meta_data.FieldMetaData("doubleField", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_FIELD, new org.apache.thrift.meta_data.FieldMetaData("stringField", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENUM_FIELD, new org.apache.thrift.meta_data.FieldMetaData("enumField", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DummyEnum.class)));
    tmpMap.put(_Fields.LIST_FIELD, new org.apache.thrift.meta_data.FieldMetaData("listField", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAP_FIELD, new org.apache.thrift.meta_data.FieldMetaData("mapField", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DummyEnum.class))));
    tmpMap.put(_Fields.SET_FIELD, new org.apache.thrift.meta_data.FieldMetaData("setField", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.REQUIRED_INT_FIELD, new org.apache.thrift.meta_data.FieldMetaData("requiredIntField", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LONG_FIELD, new org.apache.thrift.meta_data.FieldMetaData("longField", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BINARY_FIELD, new org.apache.thrift.meta_data.FieldMetaData("binaryField", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DummyStruct.class, metaDataMap);
  }

  public DummyStruct() {
    this.stringField = "defaultString";

  }

  public DummyStruct(
    boolean boolField,
    double doubleField,
    java.lang.String stringField,
    DummyEnum enumField,
    java.util.List<java.lang.String> listField,
    java.util.Map<java.lang.Integer,DummyEnum> mapField,
    java.util.Set<java.lang.Long> setField,
    int requiredIntField,
    long longField,
    java.nio.ByteBuffer binaryField)
  {
    this();
    this.boolField = boolField;
    setBoolFieldIsSet(true);
    this.doubleField = doubleField;
    setDoubleFieldIsSet(true);
    this.stringField = stringField;
    this.enumField = enumField;
    this.listField = listField;
    this.mapField = mapField;
    this.setField = setField;
    this.requiredIntField = requiredIntField;
    setRequiredIntFieldIsSet(true);
    this.longField = longField;
    setLongFieldIsSet(true);
    this.binaryField = org.apache.thrift.TBaseHelper.copyBinary(binaryField);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DummyStruct(DummyStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.boolField = other.boolField;
    this.doubleField = other.doubleField;
    if (other.isSetStringField()) {
      this.stringField = other.stringField;
    }
    if (other.isSetEnumField()) {
      this.enumField = other.enumField;
    }
    if (other.isSetListField()) {
      java.util.List<java.lang.String> __this__listField = new java.util.ArrayList<java.lang.String>(other.listField);
      this.listField = __this__listField;
    }
    if (other.isSetMapField()) {
      java.util.Map<java.lang.Integer,DummyEnum> __this__mapField = new java.util.HashMap<java.lang.Integer,DummyEnum>(other.mapField.size());
      for (java.util.Map.Entry<java.lang.Integer, DummyEnum> other_element : other.mapField.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        DummyEnum other_element_value = other_element.getValue();

        java.lang.Integer __this__mapField_copy_key = other_element_key;

        DummyEnum __this__mapField_copy_value = other_element_value;

        __this__mapField.put(__this__mapField_copy_key, __this__mapField_copy_value);
      }
      this.mapField = __this__mapField;
    }
    if (other.isSetSetField()) {
      java.util.Set<java.lang.Long> __this__setField = new java.util.HashSet<java.lang.Long>(other.setField);
      this.setField = __this__setField;
    }
    this.requiredIntField = other.requiredIntField;
    this.longField = other.longField;
    if (other.isSetBinaryField()) {
      this.binaryField = org.apache.thrift.TBaseHelper.copyBinary(other.binaryField);
    }
  }

  public DummyStruct deepCopy() {
    return new DummyStruct(this);
  }

  @Override
  public void clear() {
    setBoolFieldIsSet(false);
    this.boolField = false;
    setDoubleFieldIsSet(false);
    this.doubleField = 0.0;
    this.stringField = "defaultString";

    this.enumField = null;
    if (this.listField != null) {
      this.listField.clear();
    }
    if (this.mapField != null) {
      this.mapField.clear();
    }
    if (this.setField != null) {
      this.setField.clear();
    }
    setRequiredIntFieldIsSet(false);
    this.requiredIntField = 0;
    setLongFieldIsSet(false);
    this.longField = 0;
    this.binaryField = null;
  }

  public boolean isBoolField() {
    return this.boolField;
  }

  public DummyStruct setBoolField(boolean boolField) {
    this.boolField = boolField;
    setBoolFieldIsSet(true);
    return this;
  }

  public void unsetBoolField() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOOLFIELD_ISSET_ID);
  }

  /** Returns true if field boolField is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolField() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOOLFIELD_ISSET_ID);
  }

  public void setBoolFieldIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOOLFIELD_ISSET_ID, value);
  }

  public double getDoubleField() {
    return this.doubleField;
  }

  public DummyStruct setDoubleField(double doubleField) {
    this.doubleField = doubleField;
    setDoubleFieldIsSet(true);
    return this;
  }

  public void unsetDoubleField() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOUBLEFIELD_ISSET_ID);
  }

  /** Returns true if field doubleField is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleField() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOUBLEFIELD_ISSET_ID);
  }

  public void setDoubleFieldIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOUBLEFIELD_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStringField() {
    return this.stringField;
  }

  public DummyStruct setStringField(@org.apache.thrift.annotation.Nullable java.lang.String stringField) {
    this.stringField = stringField;
    return this;
  }

  public void unsetStringField() {
    this.stringField = null;
  }

  /** Returns true if field stringField is set (has been assigned a value) and false otherwise */
  public boolean isSetStringField() {
    return this.stringField != null;
  }

  public void setStringFieldIsSet(boolean value) {
    if (!value) {
      this.stringField = null;
    }
  }

  /**
   *
   * @see DummyEnum
   */
  @org.apache.thrift.annotation.Nullable
  public DummyEnum getEnumField() {
    return this.enumField;
  }

  /**
   *
   * @see DummyEnum
   */
  public DummyStruct setEnumField(@org.apache.thrift.annotation.Nullable DummyEnum enumField) {
    this.enumField = enumField;
    return this;
  }

  public void unsetEnumField() {
    this.enumField = null;
  }

  /** Returns true if field enumField is set (has been assigned a value) and false otherwise */
  public boolean isSetEnumField() {
    return this.enumField != null;
  }

  public void setEnumFieldIsSet(boolean value) {
    if (!value) {
      this.enumField = null;
    }
  }

  public int getListFieldSize() {
    return (this.listField == null) ? 0 : this.listField.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getListFieldIterator() {
    return (this.listField == null) ? null : this.listField.iterator();
  }

  public void addToListField(java.lang.String elem) {
    if (this.listField == null) {
      this.listField = new java.util.ArrayList<java.lang.String>();
    }
    this.listField.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getListField() {
    return this.listField;
  }

  public DummyStruct setListField(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> listField) {
    this.listField = listField;
    return this;
  }

  public void unsetListField() {
    this.listField = null;
  }

  /** Returns true if field listField is set (has been assigned a value) and false otherwise */
  public boolean isSetListField() {
    return this.listField != null;
  }

  public void setListFieldIsSet(boolean value) {
    if (!value) {
      this.listField = null;
    }
  }

  public int getMapFieldSize() {
    return (this.mapField == null) ? 0 : this.mapField.size();
  }

  public void putToMapField(int key, DummyEnum val) {
    if (this.mapField == null) {
      this.mapField = new java.util.HashMap<java.lang.Integer,DummyEnum>();
    }
    this.mapField.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,DummyEnum> getMapField() {
    return this.mapField;
  }

  public DummyStruct setMapField(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,DummyEnum> mapField) {
    this.mapField = mapField;
    return this;
  }

  public void unsetMapField() {
    this.mapField = null;
  }

  /** Returns true if field mapField is set (has been assigned a value) and false otherwise */
  public boolean isSetMapField() {
    return this.mapField != null;
  }

  public void setMapFieldIsSet(boolean value) {
    if (!value) {
      this.mapField = null;
    }
  }

  public int getSetFieldSize() {
    return (this.setField == null) ? 0 : this.setField.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getSetFieldIterator() {
    return (this.setField == null) ? null : this.setField.iterator();
  }

  public void addToSetField(long elem) {
    if (this.setField == null) {
      this.setField = new java.util.HashSet<java.lang.Long>();
    }
    this.setField.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.Long> getSetField() {
    return this.setField;
  }

  public DummyStruct setSetField(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Long> setField) {
    this.setField = setField;
    return this;
  }

  public void unsetSetField() {
    this.setField = null;
  }

  /** Returns true if field setField is set (has been assigned a value) and false otherwise */
  public boolean isSetSetField() {
    return this.setField != null;
  }

  public void setSetFieldIsSet(boolean value) {
    if (!value) {
      this.setField = null;
    }
  }

  public int getRequiredIntField() {
    return this.requiredIntField;
  }

  public DummyStruct setRequiredIntField(int requiredIntField) {
    this.requiredIntField = requiredIntField;
    setRequiredIntFieldIsSet(true);
    return this;
  }

  public void unsetRequiredIntField() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUIREDINTFIELD_ISSET_ID);
  }

  /** Returns true if field requiredIntField is set (has been assigned a value) and false otherwise */
  public boolean isSetRequiredIntField() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUIREDINTFIELD_ISSET_ID);
  }

  public void setRequiredIntFieldIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUIREDINTFIELD_ISSET_ID, value);
  }

  public long getLongField() {
    return this.longField;
  }

  public DummyStruct setLongField(long longField) {
    this.longField = longField;
    setLongFieldIsSet(true);
    return this;
  }

  public void unsetLongField() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LONGFIELD_ISSET_ID);
  }

  /** Returns true if field longField is set (has been assigned a value) and false otherwise */
  public boolean isSetLongField() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LONGFIELD_ISSET_ID);
  }

  public void setLongFieldIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LONGFIELD_ISSET_ID, value);
  }

  public byte[] getBinaryField() {
    setBinaryField(org.apache.thrift.TBaseHelper.rightSize(binaryField));
    return binaryField == null ? null : binaryField.array();
  }

  public java.nio.ByteBuffer bufferForBinaryField() {
    return org.apache.thrift.TBaseHelper.copyBinary(binaryField);
  }

  public DummyStruct setBinaryField(byte[] binaryField) {
    this.binaryField = binaryField == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(binaryField.clone());
    return this;
  }

  public DummyStruct setBinaryField(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer binaryField) {
    this.binaryField = org.apache.thrift.TBaseHelper.copyBinary(binaryField);
    return this;
  }

  public void unsetBinaryField() {
    this.binaryField = null;
  }

  /** Returns true if field binaryField is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryField() {
    return this.binaryField != null;
  }

  public void setBinaryFieldIsSet(boolean value) {
    if (!value) {
      this.binaryField = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case BOOL_FIELD:
      if (value == null) {
        unsetBoolField();
      } else {
        setBoolField((java.lang.Boolean)value);
      }
      break;

    case DOUBLE_FIELD:
      if (value == null) {
        unsetDoubleField();
      } else {
        setDoubleField((java.lang.Double)value);
      }
      break;

    case STRING_FIELD:
      if (value == null) {
        unsetStringField();
      } else {
        setStringField((java.lang.String)value);
      }
      break;

    case ENUM_FIELD:
      if (value == null) {
        unsetEnumField();
      } else {
        setEnumField((DummyEnum)value);
      }
      break;

    case LIST_FIELD:
      if (value == null) {
        unsetListField();
      } else {
        setListField((java.util.List<java.lang.String>)value);
      }
      break;

    case MAP_FIELD:
      if (value == null) {
        unsetMapField();
      } else {
        setMapField((java.util.Map<java.lang.Integer,DummyEnum>)value);
      }
      break;

    case SET_FIELD:
      if (value == null) {
        unsetSetField();
      } else {
        setSetField((java.util.Set<java.lang.Long>)value);
      }
      break;

    case REQUIRED_INT_FIELD:
      if (value == null) {
        unsetRequiredIntField();
      } else {
        setRequiredIntField((java.lang.Integer)value);
      }
      break;

    case LONG_FIELD:
      if (value == null) {
        unsetLongField();
      } else {
        setLongField((java.lang.Long)value);
      }
      break;

    case BINARY_FIELD:
      if (value == null) {
        unsetBinaryField();
      } else {
        if (value instanceof byte[]) {
          setBinaryField((byte[])value);
        } else {
          setBinaryField((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOL_FIELD:
      return isBoolField();

    case DOUBLE_FIELD:
      return getDoubleField();

    case STRING_FIELD:
      return getStringField();

    case ENUM_FIELD:
      return getEnumField();

    case LIST_FIELD:
      return getListField();

    case MAP_FIELD:
      return getMapField();

    case SET_FIELD:
      return getSetField();

    case REQUIRED_INT_FIELD:
      return getRequiredIntField();

    case LONG_FIELD:
      return getLongField();

    case BINARY_FIELD:
      return getBinaryField();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BOOL_FIELD:
      return isSetBoolField();
    case DOUBLE_FIELD:
      return isSetDoubleField();
    case STRING_FIELD:
      return isSetStringField();
    case ENUM_FIELD:
      return isSetEnumField();
    case LIST_FIELD:
      return isSetListField();
    case MAP_FIELD:
      return isSetMapField();
    case SET_FIELD:
      return isSetSetField();
    case REQUIRED_INT_FIELD:
      return isSetRequiredIntField();
    case LONG_FIELD:
      return isSetLongField();
    case BINARY_FIELD:
      return isSetBinaryField();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DummyStruct)
      return this.equals((DummyStruct)that);
    return false;
  }

  public boolean equals(DummyStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_boolField = true;
    boolean that_present_boolField = true;
    if (this_present_boolField || that_present_boolField) {
      if (!(this_present_boolField && that_present_boolField))
        return false;
      if (this.boolField != that.boolField)
        return false;
    }

    boolean this_present_doubleField = true;
    boolean that_present_doubleField = true;
    if (this_present_doubleField || that_present_doubleField) {
      if (!(this_present_doubleField && that_present_doubleField))
        return false;
      if (this.doubleField != that.doubleField)
        return false;
    }

    boolean this_present_stringField = true && this.isSetStringField();
    boolean that_present_stringField = true && that.isSetStringField();
    if (this_present_stringField || that_present_stringField) {
      if (!(this_present_stringField && that_present_stringField))
        return false;
      if (!this.stringField.equals(that.stringField))
        return false;
    }

    boolean this_present_enumField = true && this.isSetEnumField();
    boolean that_present_enumField = true && that.isSetEnumField();
    if (this_present_enumField || that_present_enumField) {
      if (!(this_present_enumField && that_present_enumField))
        return false;
      if (!this.enumField.equals(that.enumField))
        return false;
    }

    boolean this_present_listField = true && this.isSetListField();
    boolean that_present_listField = true && that.isSetListField();
    if (this_present_listField || that_present_listField) {
      if (!(this_present_listField && that_present_listField))
        return false;
      if (!this.listField.equals(that.listField))
        return false;
    }

    boolean this_present_mapField = true && this.isSetMapField();
    boolean that_present_mapField = true && that.isSetMapField();
    if (this_present_mapField || that_present_mapField) {
      if (!(this_present_mapField && that_present_mapField))
        return false;
      if (!this.mapField.equals(that.mapField))
        return false;
    }

    boolean this_present_setField = true && this.isSetSetField();
    boolean that_present_setField = true && that.isSetSetField();
    if (this_present_setField || that_present_setField) {
      if (!(this_present_setField && that_present_setField))
        return false;
      if (!this.setField.equals(that.setField))
        return false;
    }

    boolean this_present_requiredIntField = true;
    boolean that_present_requiredIntField = true;
    if (this_present_requiredIntField || that_present_requiredIntField) {
      if (!(this_present_requiredIntField && that_present_requiredIntField))
        return false;
      if (this.requiredIntField != that.requiredIntField)
        return false;
    }

    boolean this_present_longField = true;
    boolean that_present_longField = true;
    if (this_present_longField || that_present_longField) {
      if (!(this_present_longField && that_present_longField))
        return false;
      if (this.longField != that.longField)
        return false;
    }

    boolean this_present_binaryField = true && this.isSetBinaryField();
    boolean that_present_binaryField = true && that.isSetBinaryField();
    if (this_present_binaryField || that_present_binaryField) {
      if (!(this_present_binaryField && that_present_binaryField))
        return false;
      if (!this.binaryField.equals(that.binaryField))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((boolField) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(doubleField);

    hashCode = hashCode * 8191 + ((isSetStringField()) ? 131071 : 524287);
    if (isSetStringField())
      hashCode = hashCode * 8191 + stringField.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnumField()) ? 131071 : 524287);
    if (isSetEnumField())
      hashCode = hashCode * 8191 + enumField.getValue();

    hashCode = hashCode * 8191 + ((isSetListField()) ? 131071 : 524287);
    if (isSetListField())
      hashCode = hashCode * 8191 + listField.hashCode();

    hashCode = hashCode * 8191 + ((isSetMapField()) ? 131071 : 524287);
    if (isSetMapField())
      hashCode = hashCode * 8191 + mapField.hashCode();

    hashCode = hashCode * 8191 + ((isSetSetField()) ? 131071 : 524287);
    if (isSetSetField())
      hashCode = hashCode * 8191 + setField.hashCode();

    hashCode = hashCode * 8191 + requiredIntField;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(longField);

    hashCode = hashCode * 8191 + ((isSetBinaryField()) ? 131071 : 524287);
    if (isSetBinaryField())
      hashCode = hashCode * 8191 + binaryField.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DummyStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBoolField()).compareTo(other.isSetBoolField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolField, other.boolField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDoubleField()).compareTo(other.isSetDoubleField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleField, other.doubleField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStringField()).compareTo(other.isSetStringField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringField, other.stringField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnumField()).compareTo(other.isSetEnumField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnumField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enumField, other.enumField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetListField()).compareTo(other.isSetListField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listField, other.listField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMapField()).compareTo(other.isSetMapField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapField, other.mapField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSetField()).compareTo(other.isSetSetField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setField, other.setField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequiredIntField()).compareTo(other.isSetRequiredIntField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequiredIntField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requiredIntField, other.requiredIntField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLongField()).compareTo(other.isSetLongField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longField, other.longField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBinaryField()).compareTo(other.isSetBinaryField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryField, other.binaryField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DummyStruct(");
    boolean first = true;

    sb.append("boolField:");
    sb.append(this.boolField);
    first = false;
    if (!first) sb.append(", ");
    sb.append("doubleField:");
    sb.append(this.doubleField);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringField:");
    if (this.stringField == null) {
      sb.append("null");
    } else {
      sb.append(this.stringField);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enumField:");
    if (this.enumField == null) {
      sb.append("null");
    } else {
      sb.append(this.enumField);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("listField:");
    if (this.listField == null) {
      sb.append("null");
    } else {
      sb.append(this.listField);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapField:");
    if (this.mapField == null) {
      sb.append("null");
    } else {
      sb.append(this.mapField);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("setField:");
    if (this.setField == null) {
      sb.append("null");
    } else {
      sb.append(this.setField);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requiredIntField:");
    sb.append(this.requiredIntField);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longField:");
    sb.append(this.longField);
    first = false;
    if (!first) sb.append(", ");
    sb.append("binaryField:");
    if (this.binaryField == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.binaryField, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'requiredIntField' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DummyStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DummyStructStandardScheme getScheme() {
      return new DummyStructStandardScheme();
    }
  }

  private static class DummyStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<DummyStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DummyStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOL_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolField = iprot.readBool();
              struct.setBoolFieldIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOUBLE_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleField = iprot.readDouble();
              struct.setDoubleFieldIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRING_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringField = iprot.readString();
              struct.setStringFieldIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENUM_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enumField = com.ibm.watson.litelinks.test.thrift.DummyEnum.findByValue(iprot.readI32());
              struct.setEnumFieldIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LIST_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                if (struct.listField == null) {
                  struct.listField = new java.util.ArrayList<java.lang.String>(_list0.size);
                }
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1 = null;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.listField.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setListFieldIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAP_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                if (struct.mapField == null) {
                  struct.mapField = new java.util.HashMap<java.lang.Integer,DummyEnum>(2*_map3.size);
                }
                int _key4 = 0;
                @org.apache.thrift.annotation.Nullable DummyEnum _val5 = null;
                for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                {
                  _key4 = iprot.readI32();
                  _val5 = com.ibm.watson.litelinks.test.thrift.DummyEnum.findByValue(iprot.readI32());
                  struct.mapField.put(_key4, _val5);
                  _val5 = null;
                }
                iprot.readMapEnd();
              }
              struct.setMapFieldIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SET_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set7 = iprot.readSetBegin();
                if (struct.setField == null) {
                  struct.setField = new java.util.HashSet<java.lang.Long>(2*_set7.size);
                }
                long _elem8 = 0;
                for (int _i9 = 0; _i9 < _set7.size; ++_i9)
                {
                  _elem8 = iprot.readI64();
                  struct.setField.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setSetFieldIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REQUIRED_INT_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requiredIntField = iprot.readI32();
              struct.setRequiredIntFieldIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LONG_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.longField = iprot.readI64();
              struct.setLongFieldIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BINARY_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binaryField = iprot.readBinary();
              struct.setBinaryFieldIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRequiredIntField()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'requiredIntField' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DummyStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOOL_FIELD_FIELD_DESC);
      oprot.writeBool(struct.boolField);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOUBLE_FIELD_FIELD_DESC);
      oprot.writeDouble(struct.doubleField);
      oprot.writeFieldEnd();
      if (struct.stringField != null) {
        oprot.writeFieldBegin(STRING_FIELD_FIELD_DESC);
        oprot.writeString(struct.stringField);
        oprot.writeFieldEnd();
      }
      if (struct.enumField != null) {
        oprot.writeFieldBegin(ENUM_FIELD_FIELD_DESC);
        oprot.writeI32(struct.enumField.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.listField != null) {
        oprot.writeFieldBegin(LIST_FIELD_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listField.size()));
          for (java.lang.String _iter10 : struct.listField)
          {
            oprot.writeString(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mapField != null) {
        oprot.writeFieldBegin(MAP_FIELD_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.mapField.size()));
          for (java.util.Map.Entry<java.lang.Integer, DummyEnum> _iter11 : struct.mapField.entrySet())
          {
            oprot.writeI32(_iter11.getKey());
            oprot.writeI32(_iter11.getValue().getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.setField != null) {
        oprot.writeFieldBegin(SET_FIELD_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.setField.size()));
          for (long _iter12 : struct.setField)
          {
            oprot.writeI64(_iter12);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REQUIRED_INT_FIELD_FIELD_DESC);
      oprot.writeI32(struct.requiredIntField);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_FIELD_FIELD_DESC);
      oprot.writeI64(struct.longField);
      oprot.writeFieldEnd();
      if (struct.binaryField != null) {
        oprot.writeFieldBegin(BINARY_FIELD_FIELD_DESC);
        oprot.writeBinary(struct.binaryField);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DummyStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DummyStructTupleScheme getScheme() {
      return new DummyStructTupleScheme();
    }
  }

  private static class DummyStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<DummyStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DummyStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.requiredIntField);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBoolField()) {
        optionals.set(0);
      }
      if (struct.isSetDoubleField()) {
        optionals.set(1);
      }
      if (struct.isSetStringField()) {
        optionals.set(2);
      }
      if (struct.isSetEnumField()) {
        optionals.set(3);
      }
      if (struct.isSetListField()) {
        optionals.set(4);
      }
      if (struct.isSetMapField()) {
        optionals.set(5);
      }
      if (struct.isSetSetField()) {
        optionals.set(6);
      }
      if (struct.isSetLongField()) {
        optionals.set(7);
      }
      if (struct.isSetBinaryField()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetBoolField()) {
        oprot.writeBool(struct.boolField);
      }
      if (struct.isSetDoubleField()) {
        oprot.writeDouble(struct.doubleField);
      }
      if (struct.isSetStringField()) {
        oprot.writeString(struct.stringField);
      }
      if (struct.isSetEnumField()) {
        oprot.writeI32(struct.enumField.getValue());
      }
      if (struct.isSetListField()) {
        {
          oprot.writeI32(struct.listField.size());
          for (java.lang.String _iter13 : struct.listField)
          {
            oprot.writeString(_iter13);
          }
        }
      }
      if (struct.isSetMapField()) {
        {
          oprot.writeI32(struct.mapField.size());
          for (java.util.Map.Entry<java.lang.Integer, DummyEnum> _iter14 : struct.mapField.entrySet())
          {
            oprot.writeI32(_iter14.getKey());
            oprot.writeI32(_iter14.getValue().getValue());
          }
        }
      }
      if (struct.isSetSetField()) {
        {
          oprot.writeI32(struct.setField.size());
          for (long _iter15 : struct.setField)
          {
            oprot.writeI64(_iter15);
          }
        }
      }
      if (struct.isSetLongField()) {
        oprot.writeI64(struct.longField);
      }
      if (struct.isSetBinaryField()) {
        oprot.writeBinary(struct.binaryField);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DummyStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.requiredIntField = iprot.readI32();
      struct.setRequiredIntFieldIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.boolField = iprot.readBool();
        struct.setBoolFieldIsSet(true);
      }
      if (incoming.get(1)) {
        struct.doubleField = iprot.readDouble();
        struct.setDoubleFieldIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stringField = iprot.readString();
        struct.setStringFieldIsSet(true);
      }
      if (incoming.get(3)) {
        struct.enumField = com.ibm.watson.litelinks.test.thrift.DummyEnum.findByValue(iprot.readI32());
        struct.setEnumFieldIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          if (struct.listField == null) {
            struct.listField = new java.util.ArrayList<java.lang.String>(_list16.size);
          }
          @org.apache.thrift.annotation.Nullable java.lang.String _elem17 = null;
          for (int _i18 = 0; _i18 < _list16.size; ++_i18)
          {
            _elem17 = iprot.readString();
            struct.listField.add(_elem17);
          }
        }
        struct.setListFieldIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map19 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          if (struct.mapField == null) {
            struct.mapField = new java.util.HashMap<java.lang.Integer,DummyEnum>(2*_map19.size);
          }
          int _key20 = 0;
          @org.apache.thrift.annotation.Nullable DummyEnum _val21 = null;
          for (int _i22 = 0; _i22 < _map19.size; ++_i22)
          {
            _key20 = iprot.readI32();
            _val21 = com.ibm.watson.litelinks.test.thrift.DummyEnum.findByValue(iprot.readI32());
            struct.mapField.put(_key20, _val21);
            _val21 = null;
          }
        }
        struct.setMapFieldIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TSet _set23 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          if (struct.setField == null) {
            struct.setField = new java.util.HashSet<java.lang.Long>(2*_set23.size);
          }
          long _elem24 = 0;
          for (int _i25 = 0; _i25 < _set23.size; ++_i25)
          {
            _elem24 = iprot.readI64();
            struct.setField.add(_elem24);
          }
        }
        struct.setSetFieldIsSet(true);
      }
      if (incoming.get(7)) {
        struct.longField = iprot.readI64();
        struct.setLongFieldIsSet(true);
      }
      if (incoming.get(8)) {
        struct.binaryField = iprot.readBinary();
        struct.setBinaryFieldIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

