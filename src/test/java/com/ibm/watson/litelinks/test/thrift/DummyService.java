/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ibm.watson.litelinks.test.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-27")
public class DummyService {

  public interface Iface {

    public java.lang.String method_one(java.lang.String arg1, DummyStruct arg2, boolean arg3) throws TestException, InstanceFailingException, org.apache.thrift.TException;

    public DummyStruct method_two(int arg1, java.lang.String arg2, java.nio.ByteBuffer arg3) throws InstanceFailingException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void method_one(java.lang.String arg1, DummyStruct arg2, boolean arg3, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void method_two(int arg1, java.lang.String arg2, java.nio.ByteBuffer arg3, org.apache.thrift.async.AsyncMethodCallback<DummyStruct> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String method_one(java.lang.String arg1, DummyStruct arg2, boolean arg3) throws TestException, InstanceFailingException, org.apache.thrift.TException
    {
      send_method_one(arg1, arg2, arg3);
      return recv_method_one();
    }

    public void send_method_one(java.lang.String arg1, DummyStruct arg2, boolean arg3) throws org.apache.thrift.TException
    {
      method_one_args args = new method_one_args();
      args.setArg1(arg1);
      args.setArg2(arg2);
      args.setArg3(arg3);
      sendBase("method_one", args);
    }

    public java.lang.String recv_method_one() throws TestException, InstanceFailingException, org.apache.thrift.TException
    {
      method_one_result result = new method_one_result();
      receiveBase(result, "method_one");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      if (result.ife != null) {
        throw result.ife;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "method_one failed: unknown result");
    }

    public DummyStruct method_two(int arg1, java.lang.String arg2, java.nio.ByteBuffer arg3) throws InstanceFailingException, org.apache.thrift.TException
    {
      send_method_two(arg1, arg2, arg3);
      return recv_method_two();
    }

    public void send_method_two(int arg1, java.lang.String arg2, java.nio.ByteBuffer arg3) throws org.apache.thrift.TException
    {
      method_two_args args = new method_two_args();
      args.setArg1(arg1);
      args.setArg2(arg2);
      args.setArg3(arg3);
      sendBase("method_two", args);
    }

    public DummyStruct recv_method_two() throws InstanceFailingException, org.apache.thrift.TException
    {
      method_two_result result = new method_two_result();
      receiveBase(result, "method_two");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ife != null) {
        throw result.ife;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "method_two failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void method_one(java.lang.String arg1, DummyStruct arg2, boolean arg3, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      method_one_call method_call = new method_one_call(arg1, arg2, arg3, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class method_one_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String arg1;
      private DummyStruct arg2;
      private boolean arg3;
      public method_one_call(java.lang.String arg1, DummyStruct arg2, boolean arg3, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arg1 = arg1;
        this.arg2 = arg2;
        this.arg3 = arg3;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("method_one", org.apache.thrift.protocol.TMessageType.CALL, 0));
        method_one_args args = new method_one_args();
        args.setArg1(arg1);
        args.setArg2(arg2);
        args.setArg3(arg3);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws TestException, InstanceFailingException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_method_one();
      }
    }

    public void method_two(int arg1, java.lang.String arg2, java.nio.ByteBuffer arg3, org.apache.thrift.async.AsyncMethodCallback<DummyStruct> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      method_two_call method_call = new method_two_call(arg1, arg2, arg3, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class method_two_call extends org.apache.thrift.async.TAsyncMethodCall<DummyStruct> {
      private int arg1;
      private java.lang.String arg2;
      private java.nio.ByteBuffer arg3;
      public method_two_call(int arg1, java.lang.String arg2, java.nio.ByteBuffer arg3, org.apache.thrift.async.AsyncMethodCallback<DummyStruct> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arg1 = arg1;
        this.arg2 = arg2;
        this.arg3 = arg3;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("method_two", org.apache.thrift.protocol.TMessageType.CALL, 0));
        method_two_args args = new method_two_args();
        args.setArg1(arg1);
        args.setArg2(arg2);
        args.setArg3(arg3);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DummyStruct getResult() throws InstanceFailingException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_method_two();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("method_one", new method_one());
      processMap.put("method_two", new method_two());
      return processMap;
    }

    public static class method_one<I extends Iface> extends org.apache.thrift.ProcessFunction<I, method_one_args> {
      public method_one() {
        super("method_one");
      }

      public method_one_args getEmptyArgsInstance() {
        return new method_one_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public method_one_result getResult(I iface, method_one_args args) throws org.apache.thrift.TException {
        method_one_result result = new method_one_result();
        try {
          result.success = iface.method_one(args.arg1, args.arg2, args.arg3);
        } catch (TestException error) {
          result.error = error;
        } catch (InstanceFailingException ife) {
          result.ife = ife;
        }
        return result;
      }
    }

    public static class method_two<I extends Iface> extends org.apache.thrift.ProcessFunction<I, method_two_args> {
      public method_two() {
        super("method_two");
      }

      public method_two_args getEmptyArgsInstance() {
        return new method_two_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public method_two_result getResult(I iface, method_two_args args) throws org.apache.thrift.TException {
        method_two_result result = new method_two_result();
        try {
          result.success = iface.method_two(args.arg1, args.arg2, args.arg3);
        } catch (InstanceFailingException ife) {
          result.ife = ife;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("method_one", new method_one());
      processMap.put("method_two", new method_two());
      return processMap;
    }

    public static class method_one<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, method_one_args, java.lang.String> {
      public method_one() {
        super("method_one");
      }

      public method_one_args getEmptyArgsInstance() {
        return new method_one_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
          public void onComplete(java.lang.String o) {
            method_one_result result = new method_one_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            method_one_result result = new method_one_result();
            if (e instanceof TestException) {
              result.error = (TestException) e;
              result.setErrorIsSet(true);
              msg = result;
            } else if (e instanceof InstanceFailingException) {
              result.ife = (InstanceFailingException) e;
              result.setIfeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, method_one_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.method_one(args.arg1, args.arg2, args.arg3,resultHandler);
      }
    }

    public static class method_two<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, method_two_args, DummyStruct> {
      public method_two() {
        super("method_two");
      }

      public method_two_args getEmptyArgsInstance() {
        return new method_two_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<DummyStruct> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<DummyStruct>() {
          public void onComplete(DummyStruct o) {
            method_two_result result = new method_two_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            method_two_result result = new method_two_result();
            if (e instanceof InstanceFailingException) {
              result.ife = (InstanceFailingException) e;
              result.setIfeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, method_two_args args, org.apache.thrift.async.AsyncMethodCallback<DummyStruct> resultHandler) throws org.apache.thrift.TException {
        iface.method_two(args.arg1, args.arg2, args.arg3,resultHandler);
      }
    }

  }

  public static class method_one_args implements org.apache.thrift.TBase<method_one_args, method_one_args._Fields>, java.io.Serializable, Cloneable, Comparable<method_one_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("method_one_args");

    private static final org.apache.thrift.protocol.TField ARG1_FIELD_DESC = new org.apache.thrift.protocol.TField("arg1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARG2_FIELD_DESC = new org.apache.thrift.protocol.TField("arg2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ARG3_FIELD_DESC = new org.apache.thrift.protocol.TField("arg3", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new method_one_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new method_one_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String arg1; // required
    public @org.apache.thrift.annotation.Nullable DummyStruct arg2; // required
    public boolean arg3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG1((short)1, "arg1"),
      ARG2((short)2, "arg2"),
      ARG3((short)3, "arg3");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG1
            return ARG1;
          case 2: // ARG2
            return ARG2;
          case 3: // ARG3
            return ARG3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ARG3_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG1, new org.apache.thrift.meta_data.FieldMetaData("arg1", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARG2, new org.apache.thrift.meta_data.FieldMetaData("arg2", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DummyStruct.class)));
      tmpMap.put(_Fields.ARG3, new org.apache.thrift.meta_data.FieldMetaData("arg3", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(method_one_args.class, metaDataMap);
    }

    public method_one_args() {
    }

    public method_one_args(
      java.lang.String arg1,
      DummyStruct arg2,
      boolean arg3)
    {
      this();
      this.arg1 = arg1;
      this.arg2 = arg2;
      this.arg3 = arg3;
      setArg3IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public method_one_args(method_one_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetArg1()) {
        this.arg1 = other.arg1;
      }
      if (other.isSetArg2()) {
        this.arg2 = new DummyStruct(other.arg2);
      }
      this.arg3 = other.arg3;
    }

    public method_one_args deepCopy() {
      return new method_one_args(this);
    }

    @Override
    public void clear() {
      this.arg1 = null;
      if (this.arg2 != null) {
        this.arg2.clear();
      }
      setArg3IsSet(false);
      this.arg3 = false;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getArg1() {
      return this.arg1;
    }

    public method_one_args setArg1(@org.apache.thrift.annotation.Nullable java.lang.String arg1) {
      this.arg1 = arg1;
      return this;
    }

    public void unsetArg1() {
      this.arg1 = null;
    }

    /** Returns true if field arg1 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg1() {
      return this.arg1 != null;
    }

    public void setArg1IsSet(boolean value) {
      if (!value) {
        this.arg1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public DummyStruct getArg2() {
      return this.arg2;
    }

    public method_one_args setArg2(@org.apache.thrift.annotation.Nullable DummyStruct arg2) {
      this.arg2 = arg2;
      return this;
    }

    public void unsetArg2() {
      this.arg2 = null;
    }

    /** Returns true if field arg2 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg2() {
      return this.arg2 != null;
    }

    public void setArg2IsSet(boolean value) {
      if (!value) {
        this.arg2 = null;
      }
    }

    public boolean isArg3() {
      return this.arg3;
    }

    public method_one_args setArg3(boolean arg3) {
      this.arg3 = arg3;
      setArg3IsSet(true);
      return this;
    }

    public void unsetArg3() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ARG3_ISSET_ID);
    }

    /** Returns true if field arg3 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg3() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ARG3_ISSET_ID);
    }

    public void setArg3IsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ARG3_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ARG1:
        if (value == null) {
          unsetArg1();
        } else {
          setArg1((java.lang.String)value);
        }
        break;

      case ARG2:
        if (value == null) {
          unsetArg2();
        } else {
          setArg2((DummyStruct)value);
        }
        break;

      case ARG3:
        if (value == null) {
          unsetArg3();
        } else {
          setArg3((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG1:
        return getArg1();

      case ARG2:
        return getArg2();

      case ARG3:
        return isArg3();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ARG1:
        return isSetArg1();
      case ARG2:
        return isSetArg2();
      case ARG3:
        return isSetArg3();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof method_one_args)
        return this.equals((method_one_args)that);
      return false;
    }

    public boolean equals(method_one_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_arg1 = true && this.isSetArg1();
      boolean that_present_arg1 = true && that.isSetArg1();
      if (this_present_arg1 || that_present_arg1) {
        if (!(this_present_arg1 && that_present_arg1))
          return false;
        if (!this.arg1.equals(that.arg1))
          return false;
      }

      boolean this_present_arg2 = true && this.isSetArg2();
      boolean that_present_arg2 = true && that.isSetArg2();
      if (this_present_arg2 || that_present_arg2) {
        if (!(this_present_arg2 && that_present_arg2))
          return false;
        if (!this.arg2.equals(that.arg2))
          return false;
      }

      boolean this_present_arg3 = true;
      boolean that_present_arg3 = true;
      if (this_present_arg3 || that_present_arg3) {
        if (!(this_present_arg3 && that_present_arg3))
          return false;
        if (this.arg3 != that.arg3)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetArg1()) ? 131071 : 524287);
      if (isSetArg1())
        hashCode = hashCode * 8191 + arg1.hashCode();

      hashCode = hashCode * 8191 + ((isSetArg2()) ? 131071 : 524287);
      if (isSetArg2())
        hashCode = hashCode * 8191 + arg2.hashCode();

      hashCode = hashCode * 8191 + ((arg3) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(method_one_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetArg1()).compareTo(other.isSetArg1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg1, other.arg1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetArg2()).compareTo(other.isSetArg2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg2, other.arg2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetArg3()).compareTo(other.isSetArg3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg3, other.arg3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("method_one_args(");
      boolean first = true;

      sb.append("arg1:");
      if (this.arg1 == null) {
        sb.append("null");
      } else {
        sb.append(this.arg1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg2:");
      if (this.arg2 == null) {
        sb.append("null");
      } else {
        sb.append(this.arg2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg3:");
      sb.append(this.arg3);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (arg2 != null) {
        arg2.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class method_one_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public method_one_argsStandardScheme getScheme() {
        return new method_one_argsStandardScheme();
      }
    }

    private static class method_one_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<method_one_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, method_one_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.arg1 = iprot.readString();
                struct.setArg1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARG2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.arg2 == null) {
                  struct.arg2 = new DummyStruct();
                }
                struct.arg2.read(iprot);
                struct.setArg2IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ARG3
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.arg3 = iprot.readBool();
                struct.setArg3IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, method_one_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg1 != null) {
          oprot.writeFieldBegin(ARG1_FIELD_DESC);
          oprot.writeString(struct.arg1);
          oprot.writeFieldEnd();
        }
        if (struct.arg2 != null) {
          oprot.writeFieldBegin(ARG2_FIELD_DESC);
          struct.arg2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ARG3_FIELD_DESC);
        oprot.writeBool(struct.arg3);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class method_one_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public method_one_argsTupleScheme getScheme() {
        return new method_one_argsTupleScheme();
      }
    }

    private static class method_one_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<method_one_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, method_one_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetArg1()) {
          optionals.set(0);
        }
        if (struct.isSetArg2()) {
          optionals.set(1);
        }
        if (struct.isSetArg3()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetArg1()) {
          oprot.writeString(struct.arg1);
        }
        if (struct.isSetArg2()) {
          struct.arg2.write(oprot);
        }
        if (struct.isSetArg3()) {
          oprot.writeBool(struct.arg3);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, method_one_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.arg1 = iprot.readString();
          struct.setArg1IsSet(true);
        }
        if (incoming.get(1)) {
          if (struct.arg2 == null) {
            struct.arg2 = new DummyStruct();
          }
          struct.arg2.read(iprot);
          struct.setArg2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.arg3 = iprot.readBool();
          struct.setArg3IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class method_one_result implements org.apache.thrift.TBase<method_one_result, method_one_result._Fields>, java.io.Serializable, Cloneable, Comparable<method_one_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("method_one_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IFE_FIELD_DESC = new org.apache.thrift.protocol.TField("ife", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new method_one_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new method_one_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable TestException error; // required
    public @org.apache.thrift.annotation.Nullable InstanceFailingException ife; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error"),
      IFE((short)2, "ife");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          case 2: // IFE
            return IFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TestException.class)));
      tmpMap.put(_Fields.IFE, new org.apache.thrift.meta_data.FieldMetaData("ife", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InstanceFailingException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(method_one_result.class, metaDataMap);
    }

    public method_one_result() {
    }

    public method_one_result(
      java.lang.String success,
      TestException error,
      InstanceFailingException ife)
    {
      this();
      this.success = success;
      this.error = error;
      this.ife = ife;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public method_one_result(method_one_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetError()) {
        this.error = new TestException(other.error);
      }
      if (other.isSetIfe()) {
        this.ife = new InstanceFailingException(other.ife);
      }
    }

    public method_one_result deepCopy() {
      return new method_one_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error = null;
      this.ife = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public method_one_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public TestException getError() {
      return this.error;
    }

    public method_one_result setError(@org.apache.thrift.annotation.Nullable TestException error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public InstanceFailingException getIfe() {
      return this.ife;
    }

    public method_one_result setIfe(@org.apache.thrift.annotation.Nullable InstanceFailingException ife) {
      this.ife = ife;
      return this;
    }

    public void unsetIfe() {
      this.ife = null;
    }

    /** Returns true if field ife is set (has been assigned a value) and false otherwise */
    public boolean isSetIfe() {
      return this.ife != null;
    }

    public void setIfeIsSet(boolean value) {
      if (!value) {
        this.ife = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((TestException)value);
        }
        break;

      case IFE:
        if (value == null) {
          unsetIfe();
        } else {
          setIfe((InstanceFailingException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      case IFE:
        return getIfe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      case IFE:
        return isSetIfe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof method_one_result)
        return this.equals((method_one_result)that);
      return false;
    }

    public boolean equals(method_one_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      boolean this_present_ife = true && this.isSetIfe();
      boolean that_present_ife = true && that.isSetIfe();
      if (this_present_ife || that_present_ife) {
        if (!(this_present_ife && that_present_ife))
          return false;
        if (!this.ife.equals(that.ife))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetError()) ? 131071 : 524287);
      if (isSetError())
        hashCode = hashCode * 8191 + error.hashCode();

      hashCode = hashCode * 8191 + ((isSetIfe()) ? 131071 : 524287);
      if (isSetIfe())
        hashCode = hashCode * 8191 + ife.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(method_one_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIfe()).compareTo(other.isSetIfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ife, other.ife);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("method_one_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ife:");
      if (this.ife == null) {
        sb.append("null");
      } else {
        sb.append(this.ife);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class method_one_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public method_one_resultStandardScheme getScheme() {
        return new method_one_resultStandardScheme();
      }
    }

    private static class method_one_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<method_one_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, method_one_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.error == null) {
                  struct.error = new TestException();
                }
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.ife == null) {
                  struct.ife = new InstanceFailingException();
                }
                struct.ife.read(iprot);
                struct.setIfeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, method_one_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ife != null) {
          oprot.writeFieldBegin(IFE_FIELD_DESC);
          struct.ife.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class method_one_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public method_one_resultTupleScheme getScheme() {
        return new method_one_resultTupleScheme();
      }
    }

    private static class method_one_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<method_one_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, method_one_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        if (struct.isSetIfe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
        if (struct.isSetIfe()) {
          struct.ife.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, method_one_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          if (struct.error == null) {
            struct.error = new TestException();
          }
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
        if (incoming.get(2)) {
          if (struct.ife == null) {
            struct.ife = new InstanceFailingException();
          }
          struct.ife.read(iprot);
          struct.setIfeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class method_two_args implements org.apache.thrift.TBase<method_two_args, method_two_args._Fields>, java.io.Serializable, Cloneable, Comparable<method_two_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("method_two_args");

    private static final org.apache.thrift.protocol.TField ARG1_FIELD_DESC = new org.apache.thrift.protocol.TField("arg1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ARG2_FIELD_DESC = new org.apache.thrift.protocol.TField("arg2", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ARG3_FIELD_DESC = new org.apache.thrift.protocol.TField("arg3", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new method_two_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new method_two_argsTupleSchemeFactory();

    public int arg1; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String arg2; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer arg3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG1((short)1, "arg1"),
      ARG2((short)2, "arg2"),
      ARG3((short)3, "arg3");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG1
            return ARG1;
          case 2: // ARG2
            return ARG2;
          case 3: // ARG3
            return ARG3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ARG1_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG1, new org.apache.thrift.meta_data.FieldMetaData("arg1", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ARG2, new org.apache.thrift.meta_data.FieldMetaData("arg2", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARG3, new org.apache.thrift.meta_data.FieldMetaData("arg3", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(method_two_args.class, metaDataMap);
    }

    public method_two_args() {
    }

    public method_two_args(
      int arg1,
      java.lang.String arg2,
      java.nio.ByteBuffer arg3)
    {
      this();
      this.arg1 = arg1;
      setArg1IsSet(true);
      this.arg2 = arg2;
      this.arg3 = org.apache.thrift.TBaseHelper.copyBinary(arg3);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public method_two_args(method_two_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.arg1 = other.arg1;
      if (other.isSetArg2()) {
        this.arg2 = other.arg2;
      }
      if (other.isSetArg3()) {
        this.arg3 = org.apache.thrift.TBaseHelper.copyBinary(other.arg3);
      }
    }

    public method_two_args deepCopy() {
      return new method_two_args(this);
    }

    @Override
    public void clear() {
      setArg1IsSet(false);
      this.arg1 = 0;
      this.arg2 = null;
      this.arg3 = null;
    }

    public int getArg1() {
      return this.arg1;
    }

    public method_two_args setArg1(int arg1) {
      this.arg1 = arg1;
      setArg1IsSet(true);
      return this;
    }

    public void unsetArg1() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ARG1_ISSET_ID);
    }

    /** Returns true if field arg1 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg1() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ARG1_ISSET_ID);
    }

    public void setArg1IsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ARG1_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getArg2() {
      return this.arg2;
    }

    public method_two_args setArg2(@org.apache.thrift.annotation.Nullable java.lang.String arg2) {
      this.arg2 = arg2;
      return this;
    }

    public void unsetArg2() {
      this.arg2 = null;
    }

    /** Returns true if field arg2 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg2() {
      return this.arg2 != null;
    }

    public void setArg2IsSet(boolean value) {
      if (!value) {
        this.arg2 = null;
      }
    }

    public byte[] getArg3() {
      setArg3(org.apache.thrift.TBaseHelper.rightSize(arg3));
      return arg3 == null ? null : arg3.array();
    }

    public java.nio.ByteBuffer bufferForArg3() {
      return org.apache.thrift.TBaseHelper.copyBinary(arg3);
    }

    public method_two_args setArg3(byte[] arg3) {
      this.arg3 = arg3 == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(arg3.clone());
      return this;
    }

    public method_two_args setArg3(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer arg3) {
      this.arg3 = org.apache.thrift.TBaseHelper.copyBinary(arg3);
      return this;
    }

    public void unsetArg3() {
      this.arg3 = null;
    }

    /** Returns true if field arg3 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg3() {
      return this.arg3 != null;
    }

    public void setArg3IsSet(boolean value) {
      if (!value) {
        this.arg3 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ARG1:
        if (value == null) {
          unsetArg1();
        } else {
          setArg1((java.lang.Integer)value);
        }
        break;

      case ARG2:
        if (value == null) {
          unsetArg2();
        } else {
          setArg2((java.lang.String)value);
        }
        break;

      case ARG3:
        if (value == null) {
          unsetArg3();
        } else {
          if (value instanceof byte[]) {
            setArg3((byte[])value);
          } else {
            setArg3((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG1:
        return getArg1();

      case ARG2:
        return getArg2();

      case ARG3:
        return getArg3();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ARG1:
        return isSetArg1();
      case ARG2:
        return isSetArg2();
      case ARG3:
        return isSetArg3();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof method_two_args)
        return this.equals((method_two_args)that);
      return false;
    }

    public boolean equals(method_two_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_arg1 = true;
      boolean that_present_arg1 = true;
      if (this_present_arg1 || that_present_arg1) {
        if (!(this_present_arg1 && that_present_arg1))
          return false;
        if (this.arg1 != that.arg1)
          return false;
      }

      boolean this_present_arg2 = true && this.isSetArg2();
      boolean that_present_arg2 = true && that.isSetArg2();
      if (this_present_arg2 || that_present_arg2) {
        if (!(this_present_arg2 && that_present_arg2))
          return false;
        if (!this.arg2.equals(that.arg2))
          return false;
      }

      boolean this_present_arg3 = true && this.isSetArg3();
      boolean that_present_arg3 = true && that.isSetArg3();
      if (this_present_arg3 || that_present_arg3) {
        if (!(this_present_arg3 && that_present_arg3))
          return false;
        if (!this.arg3.equals(that.arg3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + arg1;

      hashCode = hashCode * 8191 + ((isSetArg2()) ? 131071 : 524287);
      if (isSetArg2())
        hashCode = hashCode * 8191 + arg2.hashCode();

      hashCode = hashCode * 8191 + ((isSetArg3()) ? 131071 : 524287);
      if (isSetArg3())
        hashCode = hashCode * 8191 + arg3.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(method_two_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetArg1()).compareTo(other.isSetArg1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg1, other.arg1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetArg2()).compareTo(other.isSetArg2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg2, other.arg2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetArg3()).compareTo(other.isSetArg3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg3, other.arg3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("method_two_args(");
      boolean first = true;

      sb.append("arg1:");
      sb.append(this.arg1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg2:");
      if (this.arg2 == null) {
        sb.append("null");
      } else {
        sb.append(this.arg2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg3:");
      if (this.arg3 == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.arg3, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class method_two_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public method_two_argsStandardScheme getScheme() {
        return new method_two_argsStandardScheme();
      }
    }

    private static class method_two_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<method_two_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, method_two_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.arg1 = iprot.readI32();
                struct.setArg1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARG2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.arg2 = iprot.readString();
                struct.setArg2IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ARG3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.arg3 = iprot.readBinary();
                struct.setArg3IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, method_two_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ARG1_FIELD_DESC);
        oprot.writeI32(struct.arg1);
        oprot.writeFieldEnd();
        if (struct.arg2 != null) {
          oprot.writeFieldBegin(ARG2_FIELD_DESC);
          oprot.writeString(struct.arg2);
          oprot.writeFieldEnd();
        }
        if (struct.arg3 != null) {
          oprot.writeFieldBegin(ARG3_FIELD_DESC);
          oprot.writeBinary(struct.arg3);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class method_two_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public method_two_argsTupleScheme getScheme() {
        return new method_two_argsTupleScheme();
      }
    }

    private static class method_two_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<method_two_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, method_two_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetArg1()) {
          optionals.set(0);
        }
        if (struct.isSetArg2()) {
          optionals.set(1);
        }
        if (struct.isSetArg3()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetArg1()) {
          oprot.writeI32(struct.arg1);
        }
        if (struct.isSetArg2()) {
          oprot.writeString(struct.arg2);
        }
        if (struct.isSetArg3()) {
          oprot.writeBinary(struct.arg3);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, method_two_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.arg1 = iprot.readI32();
          struct.setArg1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.arg2 = iprot.readString();
          struct.setArg2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.arg3 = iprot.readBinary();
          struct.setArg3IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class method_two_result implements org.apache.thrift.TBase<method_two_result, method_two_result._Fields>, java.io.Serializable, Cloneable, Comparable<method_two_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("method_two_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IFE_FIELD_DESC = new org.apache.thrift.protocol.TField("ife", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new method_two_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new method_two_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable DummyStruct success; // required
    public @org.apache.thrift.annotation.Nullable InstanceFailingException ife; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IFE((short)1, "ife");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IFE
            return IFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DummyStruct.class)));
      tmpMap.put(_Fields.IFE, new org.apache.thrift.meta_data.FieldMetaData("ife", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InstanceFailingException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(method_two_result.class, metaDataMap);
    }

    public method_two_result() {
    }

    public method_two_result(
      DummyStruct success,
      InstanceFailingException ife)
    {
      this();
      this.success = success;
      this.ife = ife;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public method_two_result(method_two_result other) {
      if (other.isSetSuccess()) {
        this.success = new DummyStruct(other.success);
      }
      if (other.isSetIfe()) {
        this.ife = new InstanceFailingException(other.ife);
      }
    }

    public method_two_result deepCopy() {
      return new method_two_result(this);
    }

    @Override
    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
      this.ife = null;
    }

    @org.apache.thrift.annotation.Nullable
    public DummyStruct getSuccess() {
      return this.success;
    }

    public method_two_result setSuccess(@org.apache.thrift.annotation.Nullable DummyStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public InstanceFailingException getIfe() {
      return this.ife;
    }

    public method_two_result setIfe(@org.apache.thrift.annotation.Nullable InstanceFailingException ife) {
      this.ife = ife;
      return this;
    }

    public void unsetIfe() {
      this.ife = null;
    }

    /** Returns true if field ife is set (has been assigned a value) and false otherwise */
    public boolean isSetIfe() {
      return this.ife != null;
    }

    public void setIfeIsSet(boolean value) {
      if (!value) {
        this.ife = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DummyStruct)value);
        }
        break;

      case IFE:
        if (value == null) {
          unsetIfe();
        } else {
          setIfe((InstanceFailingException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IFE:
        return getIfe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IFE:
        return isSetIfe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof method_two_result)
        return this.equals((method_two_result)that);
      return false;
    }

    public boolean equals(method_two_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ife = true && this.isSetIfe();
      boolean that_present_ife = true && that.isSetIfe();
      if (this_present_ife || that_present_ife) {
        if (!(this_present_ife && that_present_ife))
          return false;
        if (!this.ife.equals(that.ife))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIfe()) ? 131071 : 524287);
      if (isSetIfe())
        hashCode = hashCode * 8191 + ife.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(method_two_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIfe()).compareTo(other.isSetIfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ife, other.ife);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("method_two_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ife:");
      if (this.ife == null) {
        sb.append("null");
      } else {
        sb.append(this.ife);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class method_two_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public method_two_resultStandardScheme getScheme() {
        return new method_two_resultStandardScheme();
      }
    }

    private static class method_two_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<method_two_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, method_two_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new DummyStruct();
                }
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.ife == null) {
                  struct.ife = new InstanceFailingException();
                }
                struct.ife.read(iprot);
                struct.setIfeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, method_two_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ife != null) {
          oprot.writeFieldBegin(IFE_FIELD_DESC);
          struct.ife.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class method_two_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public method_two_resultTupleScheme getScheme() {
        return new method_two_resultTupleScheme();
      }
    }

    private static class method_two_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<method_two_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, method_two_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIfe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIfe()) {
          struct.ife.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, method_two_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new DummyStruct();
          }
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          if (struct.ife == null) {
            struct.ife = new InstanceFailingException();
          }
          struct.ife.read(iprot);
          struct.setIfeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
